// DO NOT EDIT THIS FILE
import { paths } from "@kirbic/openapi-types";
import { KirbicResponse } from "../KirbicResponse";
import { RequestHeaders } from "../RequestHeaders";
import { RequestRequestOptions } from "../RequestRequestOptions";

// https://stackoverflow.com/a/50375286/206879
type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never;

type ExtractParameters<T> = "parameters" extends keyof T
  ? UnionToIntersection<
      {
        [K in keyof T["parameters"]]: T["parameters"][K];
      }[keyof T["parameters"]]
    >
  : {};
type ExtractRequestBody<T> = "requestBody" extends keyof T
  ? "content" extends keyof T["requestBody"]
    ? "application/json" extends keyof T["requestBody"]["content"]
      ? T["requestBody"]["content"]["application/json"]
      : {
          data: {
            [K in keyof T["requestBody"]["content"]]: T["requestBody"]["content"][K];
          }[keyof T["requestBody"]["content"]];
        }
    : "application/json" extends keyof T["requestBody"]
    ? T["requestBody"]["application/json"]
    : {
        data: {
          [K in keyof T["requestBody"]]: T["requestBody"][K];
        }[keyof T["requestBody"]];
      }
  : {};
type ToOctokitParameters<T> = ExtractParameters<T> & ExtractRequestBody<T>;

type RequiredPreview<T> = T extends string
  ? {
      mediaType: {
        previews: [T, ...string[]];
      };
    }
  : {};

type Operation<
  Url extends keyof paths,
  Method extends keyof paths[Url],
  preview = unknown
> = {
  parameters: ToOctokitParameters<paths[Url][Method]> &
    RequiredPreview<preview>;
  request: {
    method: Method extends keyof MethodsMap ? MethodsMap[Method] : never;
    url: Url;
    headers: RequestHeaders;
    request: RequestRequestOptions;
  };
  response: Url extends keyof EndpointsWithMissingRequiredResponseDataSchema
    ? Method extends EndpointsWithMissingRequiredResponseDataSchema[Url]
      ? DeepRequired<ExtractOctokitResponse<paths[Url][Method]>>
      : ExtractOctokitResponse<paths[Url][Method]>
    : ExtractOctokitResponse<paths[Url][Method]>;
};

type MethodsMap = {
  delete: "DELETE";
  get: "GET";
  patch: "PATCH";
  post: "POST";
  put: "PUT";
};
type SuccessStatuses = 200 | 201 | 202 | 204;
type RedirectStatuses = 301 | 302;
type EmptyResponseStatuses = 201 | 204;
type KnownJsonResponseTypes =
  | "application/json"
  | "application/scim+json"
  | "text/html";

type SuccessResponseDataType<Responses> = {
  [K in SuccessStatuses & keyof Responses]: GetContentKeyIfPresent<
    Responses[K]
  > extends never
    ? never
    : KirbicResponse<GetContentKeyIfPresent<Responses[K]>, K>;
}[SuccessStatuses & keyof Responses];
type RedirectResponseDataType<Responses> = {
  [K in RedirectStatuses & keyof Responses]: KirbicResponse<unknown, K>;
}[RedirectStatuses & keyof Responses];
type EmptyResponseDataType<Responses> = {
  [K in EmptyResponseStatuses & keyof Responses]: KirbicResponse<never, K>;
}[EmptyResponseStatuses & keyof Responses];

type GetContentKeyIfPresent<T> = "content" extends keyof T
  ? DataType<T["content"]>
  : DataType<T>;
type DataType<T> = {
  [K in KnownJsonResponseTypes & keyof T]: T[K];
}[KnownJsonResponseTypes & keyof T];
type ExtractOctokitResponse<R> = "responses" extends keyof R
  ? SuccessResponseDataType<R["responses"]> extends never
    ? RedirectResponseDataType<R["responses"]> extends never
      ? EmptyResponseDataType<R["responses"]>
      : RedirectResponseDataType<R["responses"]>
    : SuccessResponseDataType<R["responses"]>
  : unknown;

// Workaround incorrect response types
// https://github.com/octokit/types.ts/issues/214
type EndpointsWithMissingRequiredResponseDataSchema = {
};

// https://gist.github.com/esamattis/70e9c780e08937cb0b016e04a7422010
type NotNill<T> = T extends null | undefined ? never : T;
type Primitive = undefined | null | boolean | string | number | Function;
type DeepRequired<T> = T extends Primitive
  ? NotNill<T>
  : {
      [P in keyof T]-?: T[P] extends Array<infer U>
        ? Array<DeepRequired<U>>
        : T[P] extends ReadonlyArray<infer U2>
        ? DeepRequired<U2>
        : DeepRequired<T[P]>;
    };

export interface Endpoints {
  {{#each endpointsByRoute}}
  /**
   * @see {{documentationUrl}}
   {{#deprecated}}
   * @deprecated {{{.}}}
   {{/deprecated}}
   */
  "{{@key}}": Operation<
    "{{url}}",
    "{{method}}"
    {{#requiredPreview}}, "{{.}}"{{/requiredPreview}}
  >,
  {{/each}}
}